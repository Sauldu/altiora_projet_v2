# cli/commands/quickstart.py
"""Commande `quickstart` pour la CLI Altiora.

Ce module fournit un assistant interactif pour configurer rapidement un projet Altiora.
Il guide l'utilisateur √† travers les √©tapes de clonage du projet (si n√©cessaire),
la configuration des variables d'environnement, la construction des images Docker,
et le lancement des services.
"""

import os
import click
from pathlib import Path
import subprocess
import logging

logger = logging.getLogger(__name__)


@click.command()
def quickstart():
    """Lance un assistant de configuration rapide pour le projet Altiora."

    Cette commande est con√ßue pour les nouveaux utilisateurs afin de les aider
    √† d√©marrer rapidement avec un environnement de travail fonctionnel.
    """
    click.echo("üöÄ Altiora Quickstart ‚Äì Suivez le guide pour une configuration rapide !\n")

    # 1. V√©rifie si un projet Altiora est d√©j√† pr√©sent. Si non, propose de cloner un exemple.
    if not Path("src").exists():
        if click.confirm("Aucun projet Altiora d√©tect√© dans le r√©pertoire courant. Voulez-vous cloner un projet d'exemple ?"):
            url = "https://github.com/altiora/template.git" # URL du template de projet.
            try:
                # Clone le d√©p√¥t temporairement, d√©place les fichiers, puis supprime le d√©p√¥t temporaire.
                subprocess.run(["git", "clone", url, ".altiora_temp"], check=True, capture_output=True, text=True)
                # Utilise shutil.move pour d√©placer les contenus de mani√®re plus robuste.
                for item in Path(".altiora_temp").iterdir():
                    shutil.move(str(item), ".")
                Path(".altiora_temp").rmdir()
                click.echo("‚úÖ Projet d'exemple clon√© et configur√©.")
            except subprocess.CalledProcessError as e:
                click.echo(f"‚ùå Erreur lors du clonage du projet : {e.stderr}")
                logger.error(f"Erreur lors du clonage du projet : {e.stderr}")
                return # Arr√™te le quickstart en cas d'√©chec.
            except Exception as e:
                click.echo(f"‚ùå Erreur inattendue lors de la configuration du projet : {e}")
                logger.error(f"Erreur inattendue lors de la configuration du projet : {e}")
                return
        else:
            click.echo("Op√©ration annul√©e. Veuillez cr√©er ou naviguer vers un projet Altiora existant.")
            return
    else:
        click.echo("‚úÖ Projet Altiora d√©j√† pr√©sent dans le r√©pertoire courant.")

    # 2. Configuration des variables d'environnement dans le fichier `.env`.
    env_path = Path(".env")
    if not env_path.exists():
        click.echo("üìù Cr√©ation du fichier `.env` pour les variables d'environnement.")
        # Demande √† l'utilisateur de fournir des cl√©s ou g√©n√®re des valeurs par d√©faut.
        jwt_secret = click.prompt("JWT_SECRET_KEY (laisser vide pour g√©n√©rer automatiquement)", default="", show_default=False)
        encryption_key = click.prompt("ENCRYPTION_KEY (laisser vide pour g√©n√©rer automatiquement)", default="", show_default=False)
        
        # G√©n√®re des cl√©s si l'utilisateur n'en fournit pas.
        if not jwt_secret: jwt_secret = os.urandom(32).hex()
        if not encryption_key: encryption_key = os.urandom(32).hex()

        try:
            with open(env_path, "w", encoding="utf-8") as f:
                f.write(f"JWT_SECRET_KEY={jwt_secret}\n")
                f.write(f"ENCRYPTION_KEY={encryption_key}\n")
                f.write("# Ajoutez d'autres variables d'environnement ici si n√©cessaire.\n")
            click.echo(f"‚úÖ Fichier `.env` cr√©√© avec les cl√©s g√©n√©r√©es.")
        except (IOError, OSError) as e:
            click.echo(f"‚ùå Erreur lors de la cr√©ation du fichier .env : {e}")
            logger.error(f"Erreur lors de la cr√©ation du fichier .env : {e}")
            return
    else:
        click.echo("‚úÖ Fichier `.env` d√©j√† pr√©sent.")

    # 3. Construction des images Docker du projet.
    click.echo("\n‚öôÔ∏è  Construction des images Docker du projet...")
    try:
        subprocess.run(["docker-compose", "build"], check=True, capture_output=True, text=True)
        click.echo("‚úÖ Images Docker construites avec succ√®s.")
    except FileNotFoundError:
        click.echo("‚ùå Erreur: `docker-compose` n'est pas install√© ou n'est pas dans le PATH.")
        logger.error("docker-compose non trouv√©.")
        return
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå Erreur lors de la construction des images Docker : {e.stderr}")
        logger.error(f"Erreur lors de la construction des images Docker : {e.stderr}")
        return

    # 4. Lancement des services Docker.
    click.echo("\nüéâ Lancement des services Altiora...")
    try:
        subprocess.run(["docker-compose", "up", "-d"], check=True, capture_output=True, text=True)
        click.echo("‚úÖ Services Altiora d√©marr√©s avec succ√®s en arri√®re-plan.")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå Erreur lors du d√©marrage des services : {e.stderr}")
        logger.error(f"Erreur lors du d√©marrage des services : {e.stderr}")
        return

    click.echo("\n‚úÖ Quickstart termin√© ! Votre environnement Altiora est pr√™t.")
    click.echo("Vous pouvez maintenant acc√©der au tableau de bord via votre navigateur √† http://localhost:8000 (ou le port configur√©).")


# ------------------------------------------------------------------
# D√©monstration (exemple d'utilisation)
# ------------------------------------------------------------------
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

    # Pour tester ce script, vous pouvez simuler un environnement vide ou existant.
    # Assurez-vous que `docker-compose.yml` et `requirements.txt` existent dans le r√©pertoire courant.

    print("\n--- Lancement de la d√©monstration du Altiora Quickstart ---")
    try:
        # Simule l'appel de la commande CLI.
        # sys.argv = ["cli/commands/quickstart.py"]
        # quickstart() # Appel direct de la fonction pour la d√©mo.
        # Ou via subprocess pour simuler l'appel CLI complet.
        subprocess.run([sys.executable, __file__], check=True)

    except Exception as e:
        print(f"Une erreur est survenue lors de la d√©monstration : {e}")
    finally:
        # Nettoyage des fichiers temporaires cr√©√©s par la d√©mo (si n√©cessaire).
        # Par exemple, si un projet d'exemple a √©t√© clon√©.
        # if Path(".altiora_temp").exists():
        #     import shutil
        #     shutil.rmtree(".altiora_temp")
        # if Path(".env").exists():
        #     Path(".env").unlink()
        print("D√©monstration du quickstart termin√©e.")
