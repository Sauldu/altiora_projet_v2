# cli/commands/doctor.py
"""Commande `doctor` pour la CLI Altiora.

Ce module fournit un outil de diagnostic complet pour v√©rifier l'√©tat de
l'environnement du projet Altiora. Il effectue des v√©rifications sur la
version de Python, les d√©pendances install√©es, la disponibilit√© de Docker,
la pr√©sence des fichiers et dossiers essentiels, et la configuration des
variables d'environnement critiques.
"""

import os
import subprocess
import sys
from pathlib import Path
import click
import pkg_resources
import logging

logger = logging.getLogger(__name__)


@click.command()
def doctor():
    """Effectue un diagnostic complet de l'environnement du projet Altiora."

    Cette commande v√©rifie les pr√©requis syst√®me et les configurations cl√©s
    pour s'assurer que le projet peut fonctionner correctement. Elle affiche
    un r√©sum√© des v√©rifications r√©ussies et des probl√®mes d√©tect√©s.
    """
    ok = True
    click.echo("üîç Altiora Doctor ‚Äì D√©marrage du diagnostic‚Ä¶\n")

    # 1. V√©rification de la version de Python.
    v = sys.version_info
    if v < (3, 9):
        click.echo(f"‚ùå Python >= 3.9 requis (actuel {v.major}.{v.minor}).")
        ok = False
    else:
        click.echo("‚úÖ Version de Python compatible.")

    # 2. V√©rification des d√©pendances Python install√©es.
    try:
        # Tente de charger les d√©pendances list√©es dans requirements.txt.
        pkg_resources.require(open("requirements.txt").readlines())
        click.echo("‚úÖ D√©pendances Python install√©es.")
    except Exception as e:
        click.echo(f"‚ùå D√©pendances Python manquantes ou incorrectes : {e}. Ex√©cutez `pip install -r requirements.txt`.")
        ok = False

    # 3. V√©rification de la disponibilit√© de Docker.
    # `docker info` est utilis√© pour v√©rifier si le d√©mon Docker est en cours d'ex√©cution.
    if subprocess.run(["docker", "info"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode != 0:
        click.echo("‚ùå Docker non disponible ou non d√©marr√©. Veuillez installer Docker Desktop ou d√©marrer le service Docker.")
        ok = False
    else:
        click.echo("‚úÖ Docker est disponible.")

    # 4. V√©rification des fichiers et dossiers obligatoires du projet.
    click.echo("V√©rification de l'arborescence du projet...")
    required_paths = ["src", "configs", "docker-compose.yml", "requirements.txt"]
    for p in required_paths:
        if not Path(p).exists():
            click.echo(f"‚ùå Fichier/dossier manquant : `{p}`. Assurez-vous d'√™tre √† la racine du projet.")
            ok = False
    if ok: # Si aucune erreur n'a √©t√© d√©tect√©e jusqu'√† pr√©sent pour les chemins.
        click.echo("‚úÖ Arborescence du projet conforme.")

    # 5. V√©rification des variables d'environnement critiques.
    click.echo("V√©rification des variables d'environnement critiques...")
    required_env_vars = ("JWT_SECRET_KEY", "ENCRYPTION_KEY")
    missing_env_vars = [k for k in required_env_vars if not os.getenv(k)]
    if missing_env_vars:
        click.echo(f"‚ùå Variables d'environnement manquantes : {', '.join(missing_env_vars)}. Ex√©cutez `python scripts/generate_keys.py`.")
        ok = False
    else:
        click.echo("‚úÖ Variables d'environnement critiques configur√©es.")

    # Affichage du r√©sum√© final.
    click.echo("\n" + ("‚úÖ Tout semble OK ! Votre environnement Altiora est pr√™t." if ok else "‚ùå Des erreurs ont √©t√© d√©tect√©es. Veuillez consulter les messages ci-dessus pour les corriger."))
    if not ok:
        sys.exit(1) # Quitte avec un code d'erreur si des probl√®mes sont d√©tect√©s.


# ------------------------------------------------------------------
# D√©monstration (exemple d'utilisation)
# ------------------------------------------------------------------
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

    # Pour tester ce script, vous pouvez simuler des conditions d'erreur
    # en modifiant temporairement les variables d'environnement ou les fichiers.

    print("\n--- Lancement de la d√©monstration du Altiora Doctor ---")
    try:
        # Simule un environnement valide pour le premier run.
        # Assurez-vous que `requirements.txt` et `docker-compose.yml` existent.
        # Et que `JWT_SECRET_KEY` et `ENCRYPTION_KEY` sont d√©finis dans votre `.env` ou environnement.
        doctor() 
    except SystemExit as e:
        print(f"D√©monstration termin√©e avec le code de sortie : {e.code}")

    # Exemple de simulation d'un √©chec (d√©commenter pour tester).
    # print("\n--- Simulation d'un √©chec (Python version) ---")
    # original_version_info = sys.version_info
    # sys.version_info = (3, 7, 0, 'final', 0) # Simule une version Python trop ancienne.
    # try:
    #     doctor()
    # except SystemExit as e:
    #     print(f"D√©monstration termin√©e avec le code de sortie : {e.code}")
    # finally:
    #     sys.version_info = original_version_info # Restaure la version.

    # print("\n--- Simulation d'un √©chec (variable d'environnement manquante) ---")
    # original_jwt_secret = os.getenv("JWT_SECRET_KEY")
    # if "JWT_SECRET_KEY" in os.environ: del os.environ["JWT_SECRET_KEY"]
    # try:
    #     doctor()
    # except SystemExit as e:
    #     print(f"D√©monstration termin√©e avec le code de sortie : {e.code}")
    # finally:
    #     if original_jwt_secret: os.environ["JWT_SECRET_KEY"] = original_jwt_secret

    print("D√©monstration du Altiora Doctor termin√©e.")