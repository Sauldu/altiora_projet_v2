# src/security/secret_manager.py
"""Gestionnaire de secrets ultra-s√©curis√© pour l'application Altiora.

Ce module fournit une classe `SecretsManager` qui g√®re l'acc√®s aux secrets
de l'application de mani√®re s√©curis√©e. Il charge les secrets uniquement
depuis les variables d'environnement, effectue une validation stricte au
d√©marrage et peut g√©n√©rer des cl√©s al√©atoires pour faciliter la configuration.
"""

import os
import secrets
import logging
from typing import Optional, Dict
from cryptography.fernet import Fernet
from dotenv import load_dotenv
from pathlib import Path

logger = logging.getLogger(__name__)

# Charge les variables d'environnement depuis un fichier .env si pr√©sent.
# Cela doit √™tre fait au d√©but de l'ex√©cution de l'application.
load_dotenv()


class SecretsManager:
    """Gestionnaire singleton s√©curis√© pour tous les secrets de l'application.

    Il est recommand√© d'acc√©der aux secrets via cette classe pour garantir
    une gestion coh√©rente et s√©curis√©e.
    """

    # Liste des secrets requis et leur description pour la documentation.
    REQUIRED_SECRETS: Dict[str, str] = {
        "JWT_SECRET_KEY": "Cl√© secr√®te pour la signature des jetons JWT (minimum 32 caract√®res).",
        "ENCRYPTION_KEY": "Cl√© de chiffrement Fernet (doit √™tre une cl√© Fernet valide encod√©e en base64 URL-safe).",
        "OLLAMA_API_KEY": "Cl√© API pour l'acc√®s √† Ollama (optionnelle, si Ollama n√©cessite une authentification).",
        "OPENAI_API_KEY": "Cl√© API OpenAI pour les services de mod√©ration ou autres (optionnelle).",
        "AZURE_CONTENT_SAFETY_KEY": "Cl√© Azure Content Safety pour la mod√©ration de contenu (optionnelle).",
    }

    def __init__(self, secrets_dir: Path = Path("secrets")):
        """Initialise le gestionnaire de secrets."

        Args:
            secrets_dir: Le r√©pertoire o√π les secrets pourraient √™tre stock√©s (non utilis√© directement pour le chargement).
        """
        self.secrets_dir = secrets_dir
        self.secrets_dir.mkdir(parents=True, exist_ok=True)

    @classmethod
    def get_secret(cls, key: str, required: bool = True) -> str:
        """R√©cup√®re un secret depuis les variables d'environnement."

        Args:
            key: Le nom de la variable d'environnement contenant le secret.
            required: Si True, l√®ve une `ValueError` si le secret est manquant.

        Returns:
            La valeur du secret sous forme de cha√Æne de caract√®res.

        Raises:
            ValueError: Si le secret est requis mais non trouv√©.
        """
        value = os.getenv(key)
        if required and not value:
            raise ValueError(f"Secret manquant : `{key}`. Description : {cls.REQUIRED_SECRETS.get(key, 'N/A')}")
        return value or ""

    @classmethod
    def validate_secrets(cls) -> None:
        """Effectue une validation stricte de tous les secrets requis au d√©marrage de l'application."

        Cette m√©thode v√©rifie la pr√©sence et le format des secrets critiques.

        Raises:
            RuntimeError: Si des erreurs de validation sont trouv√©es, avec une liste d√©taill√©e.
        """
        errors: List[str] = []

        # Validation de la cl√© secr√®te JWT.
        try:
            jwt_key = cls.get_secret("JWT_SECRET_KEY")
            if jwt_key and len(jwt_key) < 32:
                errors.append("JWT_SECRET_KEY doit contenir au moins 32 caract√®res pour √™tre s√©curis√©.")
        except ValueError as e:
            errors.append(str(e))

        # Validation du format de la cl√© de chiffrement Fernet.
        try:
            encryption_key = cls.get_secret("ENCRYPTION_KEY")
            if encryption_key:
                try:
                    Fernet(encryption_key.encode())
                except Exception:
                    errors.append("ENCRYPTION_KEY est invalide. Elle doit √™tre une cl√© Fernet valide (32 octets encod√©s en base64 URL-safe).")
        except ValueError as e:
            errors.append(str(e))

        if errors:
            raise RuntimeError("Erreurs de validation des secrets d√©tect√©es :\n" + "\n".join(errors))
        logger.info("‚úÖ Tous les secrets critiques ont √©t√© valid√©s avec succ√®s.")

    @classmethod
    def generate_secret_key(cls, length: int = 64) -> str:
        """G√©n√®re une cl√© secr√®te al√©atoire et s√©curis√©e."

        Args:
            length: La longueur du secret en octets (la cha√Æne r√©sultante sera plus longue).

        Returns:
            Une cha√Æne de caract√®res s√©curis√©e.
        """
        return secrets.token_urlsafe(length)

    @classmethod
    def generate_fernet_key(cls) -> str:
        """G√©n√®re une cl√© Fernet valide (32 octets encod√©s en base64 URL-safe)."

        Returns:
            Une cha√Æne de caract√®res repr√©sentant une cl√© Fernet.
        """
        return Fernet.generate_key().decode()

    @classmethod
    def generate_missing_secrets_and_prompt(cls) -> None:
        """G√©n√®re automatiquement les secrets manquants et invite l'utilisateur √† les ajouter √† .env."

        Cette m√©thode est utile pour la configuration initiale ou le d√©veloppement.
        Elle ne modifie pas directement le fichier .env, mais affiche les secrets √† ajouter.
        """
        logger.info("\n--- G√©n√©ration des secrets manquants ---")
        generated_count = 0
        for key, description in cls.REQUIRED_SECRETS.items():
            if not os.getenv(key):
                if key == "ENCRYPTION_KEY":
                    value = cls.generate_fernet_key()
                else:
                    value = cls.generate_secret_key()
                logger.info(f"‚ö†Ô∏è  Secret g√©n√©r√© pour `{key}` : `{value}`")
                logger.info(f"   Description : {description}")
                logger.info(f"   Ajoutez cette ligne √† votre fichier `.env` :\n   {key}={value}")
                generated_count += 1
        
        if generated_count > 0:
            logger.info("\nüîí N'oubliez pas d'ajouter ces lignes √† votre fichier `.env` et de le garder hors de votre d√©p√¥t Git !")
        else:
            logger.info("‚úÖ Aucun secret manquant √† g√©n√©rer. Tous les secrets requis semblent √™tre d√©finis.")


# ------------------------------------------------------------------
# D√©monstration (exemple d'utilisation)
# ------------------------------------------------------------------
if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

    print("\n--- D√©monstration du SecretsManager ---")

    # Nettoie les variables d'environnement pour une d√©monstration propre.
    for key in SecretsManager.REQUIRED_SECRETS.keys():
        if key in os.environ:
            del os.environ[key]

    # 1. G√©n√©ration et affichage des secrets manquants.
    SecretsManager.generate_missing_secrets_and_prompt()

    # 2. Simule la d√©finition de secrets dans l'environnement.
    os.environ["JWT_SECRET_KEY"] = SecretsManager.generate_secret_key()
    os.environ["ENCRYPTION_KEY"] = SecretsManager.generate_fernet_key()
    os.environ["OLLAMA_API_KEY"] = "sk-ollama123"

    print("\n--- Tentative de validation des secrets ---")
    try:
        SecretsManager.validate_secrets()
        print("‚úÖ Validation des secrets r√©ussie apr√®s d√©finition.")
    except RuntimeError as e:
        logging.error(f"‚ùå Erreur de validation des secrets : {e}")

    print("\n--- R√©cup√©ration d'un secret ---")
    try:
        jwt_secret = SecretsManager.get_secret("JWT_SECRET_KEY")
        print(f"Secret JWT r√©cup√©r√© (partiel) : {jwt_secret[:10]}...")
    except ValueError as e:
        logging.error(f"‚ùå Erreur lors de la r√©cup√©ration du secret : {e}")

    print("D√©monstration du SecretsManager termin√©e.")
