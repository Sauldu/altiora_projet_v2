#!/usr/bin/env python3
"""Script CLI pour lancer les tests de r√©gression de l'application Altiora.

Ce script permet d'ex√©cuter la suite compl√®te des tests de r√©gression.
Il peut √™tre configur√© pour mettre √† jour les baselines (r√©f√©rences) des tests,
ainsi que pour g√©n√©rer un rapport d√©taill√© des r√©sultats. Il s'assure √©galement
que les r√©pertoires n√©cessaires et les donn√©es d'exemple sont en place.

Utilisation:
    python run_regression.py [--update-baselines] [--report] [--verbose]
"""

import argparse
import asyncio
import logging
import json
from pathlib import Path

from tests.regression.test_regression_suite import RegressionSuite # Assurez-vous que ce module existe et est correct.

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def main():
    """Fonction principale pour ex√©cuter la suite de tests de r√©gression."

    Parse les arguments de la ligne de commande pour configurer l'ex√©cution des tests.
    """
    parser = argparse.ArgumentParser(description="Ex√©cute les tests de r√©gression Altiora.")
    parser.add_argument("--update-baselines", action="store_true",
                        help="Met √† jour les fichiers de r√©f√©rence (baselines) avec les r√©sultats actuels.")
    parser.add_argument("--report", action="store_true",
                        help="G√©n√®re un rapport HTML d√©taill√© des r√©sultats de r√©gression.")
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Active la sortie verbeuse pour un d√©bogage plus d√©taill√©.")

    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    # Cr√©e les r√©pertoires n√©cessaires pour les baselines et les r√©sultats des tests.
    Path("tests/regression/baselines").mkdir(parents=True, exist_ok=True)
    Path("tests/regression/results").mkdir(parents=True, exist_ok=True)
    Path("tests/regression/fixtures/sample_sfd").mkdir(parents=True, exist_ok=True)

    # Cr√©e les fichiers de test exemple s'ils n'existent pas, pour assurer un environnement de test fonctionnel.
    await _create_sample_fixtures()

    # Initialise la suite de r√©gression.
    suite = RegressionSuite()
    suite.config["update_baselines"] = args.update_baselines
    suite.config["generate_report"] = args.report # Passe l'option de rapport √† la suite.

    logger.info("üöÄ D√©marrage des tests de r√©gression...")
    results = await suite.run_full_regression()

    # Affichage du r√©sum√© des r√©sultats des tests de r√©gression.
    print("\n" + "=" * 60)
    logger.info("üìä R√âSUM√â DES TESTS DE R√âGRESSION")
    print("=" * 60)
    logger.info(f"Tests totaux : {len(results['tests'])}")
    logger.info(f"‚úÖ R√©ussis : {results['summary']['passed']}")
    logger.info(f"‚ùå √âchou√©s : {results['summary']['failed']}")
    logger.info(f"üÜï Nouveaux : {results['summary']['new']}")

    if results["summary"]["failed"] > 0:
        logger.info("\n‚ö†Ô∏è  Certains tests ont √©chou√© - veuillez consulter le rapport d√©taill√© pour plus d'informations.")
        exit(1) # Quitte avec un code d'erreur si des tests ont √©chou√©.
    else:
        logger.info("\nüéâ Tous les tests de r√©gression ont r√©ussi !")


async def _create_sample_fixtures():
    """Cr√©e des fichiers de fixtures de test exemple pour la suite de r√©gression."

    Ces fichiers sont utilis√©s pour simuler des entr√©es pour les tests
    (ex: sp√©cifications SFD, cas de test Qwen3/StarCoder2).
    """
    fixtures_dir = Path("tests/regression/fixtures")
    fixtures_dir.mkdir(parents=True, exist_ok=True)

    # Fichiers SFD d'exemple.
    sample_sfd_dir = fixtures_dir / "sample_sfd"
    sample_sfd_dir.mkdir(parents=True, exist_ok=True)

    login_spec_path = sample_sfd_dir / "login_spec.txt"
    if not login_spec_path.exists():
        login_spec_path.write_text("""
Sp√©cification Fonctionnelle - Module de Connexion

Objectif: Permettre aux utilisateurs de s'authentifier sur la plateforme

Sc√©nario 1: Connexion r√©ussie
- Pr√©-condition: L'utilisateur a un compte actif
- √âtapes:
  1. Naviguer vers /login
  2. Saisir email valide: user@example.com
  3. Saisir mot de passe valide: SecurePass123!
  4. Cliquer sur "Se connecter"
- R√©sultat attendu: Redirection vers /dashboard avec message "Bienvenue"

Sc√©nario 2: Email invalide
- √âtapes:
  1. Naviguer vers /login
  2. Saisir email invalide: invalid-email
  3. Saisir mot de passe: anything
  4. Cliquer sur "Se connecter"
- R√©sultat attendu: Message d'erreur "Format email invalide"
""")
        logger.info(f"Fichier SFD d'exemple cr√©√© : {login_spec_path}")

    # Cas de test Qwen3.
    qwen3_dir = fixtures_dir / "qwen3"
    qwen3_dir.mkdir(parents=True, exist_ok=True)

    extraction_test_path = qwen3_dir / "test_cases.json"
    if not extraction_test_path.exists():
        extraction_test_path.write_text(json.dumps([
            {
                "name": "basic_extraction",
                "input": "Test de connexion avec email et mot de passe",
                "expected_scenarios": 1
            },
            {
                "name": "complex_extraction",
                "input": "Sp√©cification avec plusieurs sc√©narios de test",
                "expected_scenarios": 3
            }
        ], indent=2))
        logger.info(f"Fichier de cas de test Qwen3 cr√©√© : {extraction_test_path}")

    # Cas de test StarCoder2.
    starcoder2_dir = fixtures_dir / "starcoder2"
    starcoder2_dir.mkdir(parents=True, exist_ok=True)

    starcoder_test_path = starcoder2_dir / "test_cases.json"
    if not starcoder_test_path.exists():
        starcoder_test_path.write_text(json.dumps([
            {
                "name": "basic_playwright_test",
                "scenario": {
                    "titre": "Test de connexion",
                    "objectif": "V√©rifier la connexion",
                    "etapes": ["Naviguer vers /login", "Cliquer sur connexion"]
                }
            }
        ], indent=2))
        logger.info(f"Fichier de cas de test StarCoder2 cr√©√© : {starcoder_test_path}")


if __name__ == "__main__":
    asyncio.run(main())