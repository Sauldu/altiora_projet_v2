Altiora_project/
|-- .env.example                                             # Fichier d'exemple pour les variables d'environnement
|-- .gitignore                                               # Fichiers et dossiers √† ignorer par Git
|-- CHANGELOG.md                                             # Journal des modifications du projet
|-- docker_compose.yml                                       # D√©finition des services pour Docker Compose
|-- docker-compose-validation.sh                             # Script de validation pour docker-compose
|-- Dockerfile                                               # Instructions pour construire l'image Docker principale
|-- export.py                                                # Script pour exporter des donn√©es ou mod√®les
|-- pytest.ini                                               # Fichier de configuration pour Pytest
|-- README.md                                                # Fichier d'information principal du projet
|-- requirements.txt                                         # Liste des d√©pendances Python du projet
|-- setup-script.py                                          # Script d'installation et de configuration
|-- structure.txt                                            # Description de la structure du projet (ce fichier)
|
|-- .github/                                                 # üìÅ Configuration pour GitHub
|   \---workflows/                                            # üìÅ Workflows d'int√©gration continue (CI/CD)
|       \---ci-cd.yml                                        # Workflow pour le d√©ploiement et les tests automatis√©s
|
|-- cli/                                                     # üìÅ Interface en ligne de commande
|   |-- __init__.py                                          # Initialiseur du package cli
|   |-- main.py                                              # Point d'entr√©e de l'application CLI
|   \---commands/                                            # üìÅ Commandes CLI sp√©cifiques
|
|-- configs/                                                 # üìÅ Fichiers de configuration centralis√©s
|   |-- __init__.py                                          # Initialiseur du package configs
|   |-- config_module.py                                     # Module de configuration Pydantic pour les param√®tres
|   |-- emergency_webhooks.yaml                              # Webhooks pour les alertes d'urgence
|   |-- env-example-complete.yaml                            # Exemple complet de fichier d'environnement
|   |-- error_handling.yaml                                  # Configuration pour la gestion des erreurs
|   |-- master_config.yaml                                   # Fichier de configuration principal
|   |-- models_config.yaml                                   # Configuration des mod√®les de langue
|   |-- models.yaml                                          # D√©finition des mod√®les utilis√©s
|   |-- ollama_config.json                                   # Param√®tres de configuration pour Ollama
|   |-- ollama_optimized.yaml                                # Configuration optimis√©e pour Ollama
|   |-- prometheus.yml                                       # Configuration pour la surveillance avec Prometheus
|   |-- retry_config.yaml                                    # Strat√©gies de nouvelle tentative pour les op√©rations r√©seau
|   |-- roles.yaml                                           # D√©finition des r√¥les et permissions (RBAC)
|   |-- services.yaml                                        # Configuration des micro-services
|   |-- settings_legacy.py                                   # Anciens param√®tres de configuration (legacy)
|   |-- settings_loader.py                                   # Chargeur de configuration
|   |-- training_config.json                                 # Configuration pour l'entra√Ænement des mod√®les
|   \---validator.py                                        # Script de validation pour la configuration
|
|-- data/                                                    # üìÅ Donn√©es utilis√©es par l'application
|   |-- models/                                              # üìÅ Mod√®les de machine learning sauvegard√©s
|   |-- scenarios/                                           # üìÅ Sc√©narios de test ou d'utilisation
|   |-- temp/                                                # üìÅ Fichiers de donn√©es temporaires
|   \---training/                                            # üìÅ Donn√©es pour l'entra√Ænement des mod√®les
|
|-- docker/                                                  # üìÅ Fichiers de configuration sp√©cifiques √† Docker
|
|-- docs/                                                    # üìÅ Documentation du projet
|   |-- ARCHITECTURE.md                                      # Description de l'architecture globale
|   |-- env-documentation.md                                 # Documentation des variables d'environnement
|   |-- generate_docs.py                                     # Script pour g√©n√©rer la documentation
|   |-- installation_guide.md                                # Guide d'installation
|   \---examples/                                            # üìÅ Exemples d'utilisation
|
|-- guardrails/                                              # üîí Modules de s√©curit√© et de contr√¥le
|   |-- __init__.py                                          # Initialiseur du package guardrails
|   |-- admin_control_system.py                              # Syst√®me de contr√¥le pour les administrateurs
|   |-- admin_dashboard.py                                   # Interface pour le tableau de bord administrateur
|   |-- emergency_handler.py                                 # Gestionnaire des situations d'urgence
|   |-- ethical_safeguards.py                                # Garde-fous √©thiques pour l'IA
|   |-- interaction_guardrail.py                             # Filtres pour les interactions utilisateur
|   |-- policy_enforcer.py                                   # Application des politiques de s√©curit√©
|   \---toxicity_guardrail.py                                # D√©tection de contenu toxique
|
|-- logs/                                                    # üìÅ Fichiers de logs de l'application
|
|-- models/                                                  # üìÅ Mod√®les de donn√©es ou sch√©mas (non-ML)
|
|-- policies/                                                # üìã R√®gles m√©tier et politiques
|   |-- __init__.py                                          # Initialiseur du package policies
|   |-- business_rules.py                                    # Impl√©mentation des r√®gles m√©tier
|   |-- excel_policy.py                                      # Politiques sp√©cifiques au traitement Excel
|   |-- privacy_policy.py                                    # Politiques de confidentialit√© des donn√©es
|   \---toxicity_policy.py                                   # Politiques relatives √† la toxicit√© du contenu
|
|-- post_processing/                                         # üßπ Nettoyage et formatage des sorties
|   |-- __init__.py                                          # Initialiseur du package post_processing
|   |-- code_validator.py                                    # Validation et linting du code g√©n√©r√©
|   |-- excel_formatter.py                                   # Formatage des fichiers Excel
|   \---output_sanitizer.py                                  # Nettoyage des sorties (ex: masquage de PII)
|
|-- scripts/                                                 # üõ†Ô∏è Scripts utilitaires pour le d√©veloppement
|   |-- audit_query.py                                       # Script pour interroger les logs d'audit
|   |-- backup_redis.sh                                      # Script de sauvegarde de la base de donn√©es Redis
|   |-- cpu_optimization_script.py                           # Script pour optimiser l'utilisation du CPU
|   |-- create_ephemeral_env.sh                              # Script pour cr√©er un environnement √©ph√©m√®re
|   |-- diagnose_ollama.py                                   # Outil de diagnostic pour Ollama
|   |-- docker-compose.ephemeral.yml                         # Configuration Docker Compose pour l'environnement √©ph√©m√®re
|   |-- generate_keys.py                                     # G√©n√©ration de cl√©s de chiffrement/API
|   |-- generate_performance_report.py                       # G√©n√©ration de rapports de performance
|   |-- qwen3_modelfile                                      # D√©finition du mod√®le Qwen3 pour Ollama
|   |-- run_performance_tests.sh                             # Lanceur pour les tests de performance
|   |-- setup_integration_tests.sh                           # Script de configuration des tests d'int√©gration
|   |-- starcoder2_modelfile                                 # D√©finition du mod√®le Starcoder2 pour Ollama
|   |-- start_dev.sh                                         # Script pour d√©marrer l'environnement de d√©veloppement
|   \---validate_setup.py                                    # Validation de la configuration de l'environnement
|
|-- services/                                                # üì¶ Micro-services conteneuris√©s
|   |-- alm/                                                 # üìÅ Service ALM (Application Lifecycle Management)
|   |-- dash/                                                # üìÅ Service pour le dashboard
|   |-- excel/                                               # üìÅ Service de traitement Excel
|   |-- ocr/                                                 # üìÅ Service OCR (Reconnaissance Optique de Caract√®res)
|   \---playwright/                                          # üìÅ Service d'automatisation avec Playwright
|
|-- src/                                                     # üéØ C≈ìur de l'application et de l'orchestrateur
|   |-- __init__.py                                          # Initialiseur du package src
|   |-- App.js                                               # Fichier principal pour l'interface React
|   |-- batch_processor.py                                   # Traitement des t√¢ches en lots
|   |-- config.py                                            # Configuration principale de l'application
|   |-- error_management.py                                  # Module central de gestion des erreurs
|   |-- main.py                                              # Point d'entr√©e principal de l'application
|   |-- models.py                                            # Mod√®les de donn√©es (Pydantic/SQLAlchemy)
|   |-- orchestrator.py                                      # Orchestre le pipeline des t√¢ches
|   |-- api/                                                 # üìÅ API de l'application
|   |-- audit/                                               # üìÅ Journalisation et audit
|   |-- auth/                                                # üìÅ Authentification et autorisation
|   |-- cache/                                               # üìÅ Gestion du cache
|   |-- components/                                          # üìÅ Composants d'interface (React)
|   |-- config/                                              # üìÅ Configuration sp√©cifique au code source
|   |-- core/                                                # üìÅ Logique m√©tier principale
|   |-- dashboard/                                           # üìÅ Code du dashboard
|   |-- docs/                                                # üìÅ Documentation sp√©cifique au code source
|   |-- ensemble/                                            # üìÅ Techniques d'ensemble de mod√®les
|   |-- events/                                              # üìÅ Gestion des √©v√©nements
|   |-- factories/                                           # üìÅ Fabriques de mod√®les et services
|   |-- gateway/                                             # üìÅ Passerelle API
|   |-- infrastructure/                                      # üìÅ Connexion aux services externes
|   |-- learning/                                            # üìÅ Apprentissage et entra√Ænement
|   |-- metrics/                                             # üìÅ M√©triques de performance
|   |-- middleware/                                          # üìÅ Middlewares pour le traitement des requ√™tes
|   |-- models/                                              # üìÅ Interfaces avec les mod√®les de langue
|   |-- modules/                                             # üìÅ Modules fonctionnels
|   |-- monitoring/                                          # üìÅ Surveillance et m√©triques
|   |-- optimization/                                        # üìÅ Optimisation des performances
|   |-- playwright/                                          # üìÅ Int√©gration avec Playwright
|   |-- plugins/                                             # üìÅ Syst√®me de plugins
|   |-- qa_system/                                           # üìÅ Syst√®me de questions-r√©ponses
|   |-- rbac/                                                # üìÅ Logique RBAC (Role-Based Access Control)
|   |-- redux/                                               # üìÅ Gestion d'√©tat Redux pour le frontend
|   |-- repositories/                                        # üìÅ Acc√®s aux donn√©es (ORM/Repositories)
|   |-- scaling/                                             # üìÅ Mise √† l'√©chelle de l'application
|   |-- security/                                            # üîê S√©curit√© et chiffrement
|   |-- training/                                            # üìÅ Entra√Ænement des mod√®les
|   |-- utils/                                               # üìÅ Utilitaires divers
|   \---validation/                                          # üìÅ Validation des donn√©es
|
|-- temp/                                                    # üìÅ Fichiers et dossiers temporaires
|
\---tests/                                                   # üß™ Suite de tests du projet
    |-- __init__.py                                          # Initialiseur du package tests
    |-- conftest.py                                          # Fixtures et configuration pour Pytest
    |-- test_admin_control.py                                # Tests pour le syst√®me de contr√¥le admin
    |-- test_altiora_core.py                                 # Tests pour le noyau de la personnalit√©
    |-- test_ethical_safeguards.py                           # Tests pour les garde-fous √©thiques
    |-- test_fine_tuning.py                                  # Tests pour le processus de fine-tuning
    |-- test_integration.py                                  # Tests d'int√©gration g√©n√©raux
    |-- test_interfaces.py                                   # Tests pour les interfaces des mod√®les
    |-- test_ocr_wrapper.py                                  # Tests pour le wrapper OCR
    |-- test_orchestrator.py                                 # Tests pour l'orchestrateur principal
    |-- test_personality_quiz.py                             # Tests pour le quiz de personnalit√©
    |-- test_playwright_runner.py                            # Tests pour l'ex√©cuteur Playwright
    |-- test_retry_handler.py                                # Tests pour le gestionnaire de tentatives
    |-- test_services.py                                     # Tests pour les micro-services
    |-- integration/                                         # üìÅ Tests d'int√©gration
    |-- performance/                                         # üìÅ Tests de performance et de charge
    \---regression/                                          # üìÅ Tests de r√©gression
