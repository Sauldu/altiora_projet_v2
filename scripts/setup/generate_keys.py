#!/usr/bin/env python3
"""Script pour g√©n√©rer les secrets n√©cessaires et les enregistrer dans un fichier .env.

Ce script facilite la configuration initiale d'un nouvel environnement en g√©n√©rant
automatiquement les cl√©s cryptographiques requises (pour JWT, chiffrement, etc.).
Il propose de cr√©er ou d'√©craser un fichier `.env` √† la racine du projet avec
les cl√©s g√©n√©r√©es et des placeholders pour les cl√©s d'API externes.

Utilisation :
    python -m scripts.generate_keys
"""

import os
import logging
from pathlib import Path

# Assurez-vous que le chemin du projet est dans sys.path pour l'import
import sys
sys.path.append(str(Path(__file__).parent.parent))

from src.security.secret_manager import SecretsManager

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


def main():
    """Fonction principale du script."""
    env_file = Path(".env")

    # V√©rifie si le fichier .env existe d√©j√† et demande confirmation pour l'√©craser.
    if env_file.exists():
        logger.warning(f"‚ö†Ô∏è  Le fichier `{env_file}` existe d√©j√† !")
        response = input("Voulez-vous l'√©craser avec de nouvelles cl√©s ? [y/N]: ")
        if response.lower() != 'y':
            logger.info("Op√©ration annul√©e.")
            return

    # G√©n√©ration des secrets n√©cessaires.
    secrets = {
        "JWT_SECRET_KEY": SecretsManager.generate_secret_key(),
        "ENCRYPTION_KEY": SecretsManager.generate_secret_key(),
        "ALM_API_KEY": "",
        "OPENAI_API_KEY": "",
        "AZURE_CONTENT_SAFETY_KEY": ""
    }

    # √âcriture s√©curis√©e dans le fichier .env.
    try:
        with open(env_file, "w", encoding='utf-8') as f:
            f.write("# Fichier de secrets pour le projet Altiora\n")
            f.write("# ATTENTION : NE PAS COMMIT CE FICHIER DANS GIT !\n\n")
            for key, value in secrets.items():
                f.write(f"{key}={value}\n")

        logger.info(f"‚úÖ Les secrets ont √©t√© g√©n√©r√©s avec succ√®s dans `{env_file}`.")
        logger.info("üîí N'oubliez pas de remplir les valeurs vides pour les cl√©s d'API externes.")
        logger.info("üîí Assurez-vous que le fichier `.env` est bien list√© dans votre `.gitignore`.")
    except (IOError, OSError) as e:
        logger.error(f"‚ùå Erreur lors de l'√©criture dans le fichier .env : {e}")


if __name__ == "__main__":
    main()
