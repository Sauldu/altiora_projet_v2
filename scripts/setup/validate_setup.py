#!/usr/bin/env python3
"""Script de validation complet pour l'environnement de d√©veloppement Altiora.

Ce script v√©rifie que tous les composants critiques de l'environnement sont
correctement install√©s et configur√©s. Il est con√ßu pour √™tre ex√©cut√© apr√®s
l'installation initiale ou pour diagnostiquer des probl√®mes d'environnement.

Les v√©rifications incluent :
- La coh√©rence entre les mod√®les Ollama configur√©s et ceux r√©ellement install√©s.
- La pr√©sence et la version des d√©pendances Python critiques (PyTorch, etc.).
"""
import sys
import subprocess
import logging
from pathlib import Path

import yaml

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


class SetupValidator:
    """Valide l'installation compl√®te d'Altiora."""

    def __init__(self):
        """Initialise le validateur."""
        self.errors: list[str] = []
        self.warnings: list[str] = []

    def validate_models(self):
        """V√©rifie la coh√©rence des mod√®les Ollama."""
        logger.info("üîç V√©rification des mod√®les Ollama...")
        try:
            # Charge la configuration des mod√®les depuis le fichier YAML.
            models_config_path = Path("configs/models.yaml")
            if not models_config_path.exists():
                self.errors.append(f"Le fichier de configuration des mod√®les `{models_config_path}` est introuvable.")
                return

            models_config = yaml.safe_load(models_config_path.read_text())
            required_models = [conf['ollama_tag'] for conf in models_config.get("models", {}).values()]

            # R√©cup√®re la liste des mod√®les install√©s via la commande Ollama.
            result = subprocess.run(
                ["ollama", "list"],
                capture_output=True,
                text=True,
                check=True
            )
            installed_models = result.stdout

            # Compare les mod√®les requis et install√©s.
            for model_tag in required_models:
                if model_tag not in installed_models:
                    self.errors.append(
                        f"Mod√®le manquant : `{model_tag}` n'est pas install√© dans Ollama. "
                        f"Ex√©cutez `ollama pull {model_tag}`."
                    )
                else:
                    logger.info(f"  - ‚úÖ Mod√®le `{model_tag}` trouv√©.")

        except FileNotFoundError:
            self.errors.append("La commande `ollama` n'a pas √©t√© trouv√©e. Assurez-vous qu'Ollama est install√© et dans le PATH.")
        except (subprocess.CalledProcessError, yaml.YAMLError, KeyError) as e:
            self.errors.append(f"Une erreur est survenue lors de la validation des mod√®les : {e}")

    def validate_dependencies(self):
        """V√©rifie la pr√©sence et la version des d√©pendances Python critiques."""
        logger.info("\nüîç V√©rification des d√©pendances Python...")
        try:
            import torch
            logger.info(f"  - ‚úÖ PyTorch version {torch.__version__} trouv√©.")
            if not torch.__version__.startswith("2."):
                self.warnings.append(
                    f"La version de PyTorch ({torch.__version__}) n'est pas la version 2.x recommand√©e."
                )

            import transformers
            logger.info(f"  - ‚úÖ Transformers version {transformers.__version__} trouv√©.")

            import peft
            logger.info(f"  - ‚úÖ PEFT version {peft.__version__} trouv√©.")

        except ImportError as e:
            self.errors.append(f"D√©pendance Python manquante : {e}. Ex√©cutez `pip install -r requirements.txt`.")

    def run(self) -> bool:
        """Ex√©cute toutes les validations et affiche un r√©sum√©.

        Returns:
            True si aucune erreur n'a √©t√© trouv√©e, False sinon.
        """
        self.validate_models()
        self.validate_dependencies()

        print("\n" + "-"*50)
        if self.errors:
            logger.error("‚ùå DES ERREURS CRITIQUES ONT √âT√â TROUV√âES :")
            for error in self.errors:
                logger.error(f"  - {error}")

        if self.warnings:
            logger.warning("\n‚ö†Ô∏è  AVERTISSEMENTS :")
            for warning in self.warnings:
                logger.warning(f"  - {warning}")
        
        if not self.errors and not self.warnings:
            logger.info("‚úÖ L'environnement semble correctement configur√© !")
        
        return not self.errors


if __name__ == "__main__":
    validator = SetupValidator()
    logger.info("Lancement de la validation de l'environnement Altiora...")
    if not validator.run():
        logger.error("\nValidation √©chou√©e. Veuillez corriger les erreurs ci-dessus.")
        sys.exit(1)
    else:
        logger.info("\nValidation r√©ussie.")
