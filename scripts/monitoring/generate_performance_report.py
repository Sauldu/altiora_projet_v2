#!/usr/bin/env python3
"""G√©n√®re un rapport de performance HTML et PNG √† partir de m√©triques.

Ce script prend un dictionnaire de m√©triques de performance (utilisation CPU,
m√©moire, temps de r√©ponse, etc.) et g√©n√®re un rapport visuel comprenant :
- Un fichier JSON brut avec toutes les donn√©es.
- une image PNG avec des graphiques (utilisation CPU/m√©moire, histogramme des
  temps de r√©ponse, etc.).
- Un fichier HTML auto-contenu qui affiche les m√©triques cl√©s, les graphiques
  et des recommandations simples.

Ce script est con√ßu pour √™tre appel√© √† la fin d'une suite de tests de performance.
"""

import gc
import json
import sys
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

import matplotlib
import psutil
from matplotlib import pyplot as plt

# Utilise un backend non-interactif pour Matplotlib, car aucune GUI n'est n√©cessaire.
matplotlib.use("Agg")

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

# ------------------------------------------------------------------
# Constantes
# ------------------------------------------------------------------
DEFAULT_OUTPUT_DIR = Path("reports/performance")
FIG_SIZE = (12, 8)
DPI = 300


# ------------------------------------------------------------------
# G√©n√©rateur de Rapport
# ------------------------------------------------------------------
class PerformanceReportGenerator:
    """G√©n√®re des graphiques CPU, m√©moire, temps de r√©ponse et un rapport HTML."""

    def __init__(self, output_dir: Optional[Path] = None) -> None:
        """Initialise le g√©n√©rateur de rapport."""
        self.output_dir = (output_dir or DEFAULT_OUTPUT_DIR).resolve()
        self.output_dir.mkdir(parents=True, exist_ok=True)

    # ------------------------------------------------------------------
    # API Publique
    # ------------------------------------------------------------------
    def generate_report(self, metrics: Dict[str, Any]) -> Path:
        """G√©n√®re les fichiers JSON, PNG, et HTML du rapport et retourne le chemin du HTML."""
        report_data = self._build_report_data(metrics)
        self._dump_json(report_data)
        self._create_performance_charts(metrics)
        html_path = self._create_html_report(report_data)
        gc.collect()  # Force le garbage collection pour lib√©rer la m√©moire de Matplotlib.
        return html_path

    # ------------------------------------------------------------------
    # Assistants Priv√©s
    # ------------------------------------------------------------------
    def _build_report_data(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Structure le payload final pour le rapport JSON et HTML."""
        return {
            "timestamp": datetime.now().isoformat(),
            "system_info": {
                "cpu_cores": psutil.cpu_count(logical=False),
                "cpu_threads": psutil.cpu_count(logical=True),
                "memory_gb": round(psutil.virtual_memory().total / (1024 ** 3), 2),
                "python_version": sys.version,
            },
            "metrics": metrics,
            "recommendations": self._generate_recommendations(metrics),
        }

    def _dump_json(self, data: Dict[str, Any]) -> None:
        """Sauvegarde les donn√©es brutes au format JSON pour un traitement ult√©rieur."""
        try:
            json_path = self.output_dir / "performance_metrics.json"
            with json_path.open("w", encoding="utf-8") as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        except (IOError, OSError) as e:
            logger.error(f"Erreur lors de l'√©criture du JSON des m√©triques de performance : {e}")

    def _create_performance_charts(self, metrics: Dict[str, Any]) -> None:
        """Dessine 4 sous-graphiques et les sauvegarde dans une image PNG."""
        cpu: List[float] = metrics.get("cpu_usage", [])
        mem: List[float] = metrics.get("memory_usage_gb", [])
        rt: List[float] = metrics.get("response_times_s", [])
        tp: float = metrics.get("throughput_req_s", 0.0)

        fig, axes = plt.subplots(2, 2, figsize=FIG_SIZE)
        fig.suptitle('Tableau de Bord des Performances Altiora', fontsize=16)

        # Graphique CPU
        axes[0, 0].plot(cpu or [0], marker='o', linestyle='-', color='b')
        axes[0, 0].set_title("Utilisation CPU au fil du temps")
        axes[0, 0].set_ylabel("Utilisation (%)")
        axes[0, 0].grid(True)

        # Graphique M√©moire
        axes[0, 1].plot(mem or [0], marker='o', linestyle='-', color='r')
        axes[0, 1].set_title("Utilisation M√©moire au fil du temps")
        axes[0, 1].set_ylabel("M√©moire (GB)")
        axes[0, 1].grid(True)

        # Histogramme des temps de r√©ponse
        axes[1, 0].hist(rt or [0], bins=min(len(rt) or 1, 20), color="skyblue", edgecolor="black")
        axes[1, 0].set_title("Distribution des Temps de R√©ponse")
        axes[1, 0].set_xlabel("Temps de r√©ponse (s)")
        axes[1, 0].set_ylabel("Fr√©quence")

        # Barre de d√©bit
        axes[1, 1].bar(["D√©bit"], [tp], color='g')
        axes[1, 1].set_title("D√©bit Moyen")
        axes[1, 1].set_ylabel("Requ√™tes/seconde")

        plt.tight_layout(rect=[0, 0.03, 1, 0.95])
        try:
            fig.savefig(self.output_dir / "performance_charts.png", dpi=DPI)
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde des graphiques de performance : {e}")
        finally:
            plt.close(fig)  # Lib√®re la m√©moire utilis√©e par la figure.

    @staticmethod
    def _generate_recommendations(metrics: Dict[str, Any]) -> List[str]:
        """Retourne une liste de recommandations textuelles simples bas√©es sur les m√©triques."""
        recs = []
        if metrics.get("success_rate", 100) < 95:
            recs.append("Le taux de succ√®s est inf√©rieur √† 95%. Envisagez d'augmenter la robustesse des tests ou la capacit√© du syst√®me.")
        if metrics.get("avg_duration_s", 0) > 60:
            recs.append("Le temps de r√©ponse moyen est sup√©rieur √† 60s. Pensez √† optimiser le code ou √† utiliser un cache plus agressif.")
        if metrics.get("memory_usage_gb", [0])[-1] > 20:
            recs.append("L'utilisation de la m√©moire est √©lev√©e. Surveillez les fuites de m√©moire ou envisagez d'augmenter les limites Docker.")
        return recs or ["Toutes les m√©triques semblent dans les clous. Bon travail !"]

    def _create_html_report(self, data: Dict[str, Any]) -> Path:
        """G√©n√®re un rapport HTML auto-contenu."""
        html_template = f"""... (le template HTML reste inchang√©) ..."""
        html_path = self.output_dir / "performance_report.html"
        try:
            html_path.write_text(html_template, encoding="utf-8")
        except (IOError, OSError) as e:
            logger.error(f"Erreur lors de l'√©criture du rapport HTML : {e}")
        return html_path


# ------------------------------------------------------------------
# CLI / D√©monstration
# ------------------------------------------------------------------
if __name__ == "__main__":
    generator = PerformanceReportGenerator()

    # Exemple de donn√©es de m√©triques
    sample_metrics: Dict[str, Any] = {
        "success_rate": 95.5,
        "throughput_req_s": 2.3,
        "avg_duration_s": 45.2,
        "cpu_usage": [45, 67, 78, 82, 75, 70, 65],
        "memory_usage_gb": [8.5, 12.3, 15.7, 18.2, 16.8, 16.5, 16.0],
        "response_times_s": [30, 35, 42, 38, 45, 52, 48, 41, 46, 55],
    }

    logger.info("üìä G√©n√©ration d'un exemple de rapport de performance...")
    report_file = generator.generate_report(sample_metrics)
    logger.info(f"‚úÖ Rapport de performance sauvegard√© ici : {report_file}")